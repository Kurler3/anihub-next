// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @unique
  avatarUrl           String?
  username            String                @unique
  email               String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  followers           Follows[]             @relation("following")
  following           Follows[]             @relation("follower")
  Post                Post[]
  Comment             Comment[]
  CommentLike         CommentLike[]
  AnimeComments       AnimeComment[]
  WatchList           WatchList[]
  SharedWatchlists    WatchListUser[]
  AnimeCommentLike    AnimeCommentLike[]
  AnimeCommentDislike AnimeCommentDislike[]
  CommentDislike      CommentDislike[]

  @@map("users")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@map("follows")
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Comment   Comment[]

  @@map("posts")
}

model Comment {
  id              Int       @id @default(autoincrement())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  postId          Int
  post            Post      @relation(fields: [postId], references: [id])
  parentCommentId Int? // Nullable field to reference the parent comment
  parentComment   Comment?  @relation("ChildComments", fields: [parentCommentId], references: [id])
  childComments   Comment[] @relation("ChildComments")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  likes CommentLike[]
  dislikes CommentDislike[]

  @@map("comments")
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments_likes")
}

model CommentDislike {
  id        Int          @id @default(autoincrement())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments_dislikes")
}

model AnimeComment {
  id      Int    @id @default(autoincrement())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  animeId Int
  episode Int?
  content String

  parentAnimeCommentId Int?
  parentAnimeComment   AnimeComment?  @relation("ChildAnimeComments", fields: [parentAnimeCommentId], references: [id], onDelete: Cascade)
  childAnimeComments   AnimeComment[] @relation("ChildAnimeComments")

  // Likes and Dislikes relationships
  likes              AnimeCommentLike[]  @relation("AnimeCommentLikes")
  dislikes           AnimeCommentDislike[] @relation("AnimeCommentDislikes")


  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())

  @@map("anime_comments")
}

model AnimeCommentLike {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  animeCommentId Int
  animeComment   AnimeComment @relation("AnimeCommentLikes", fields: [animeCommentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("anime_comments_likes")
}

model AnimeCommentDislike {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  animeCommentId Int
  animeComment   AnimeComment @relation("AnimeCommentDislikes", fields: [animeCommentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("anime_comments_dislikes")
}

model WatchList {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id])
  watchlistUsers WatchListUser[]
  WatchlistAnime WatchlistAnime[]

  @@map("watchlists")
}

model WatchListUser {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  watchlistId Int
  watchlist   WatchList @relation(fields: [watchlistId], references: [id])

  @@id([userId, watchlistId])
  @@map("watchlist_users")
}

model WatchlistAnime {
  watchListId Int
  watchlist   WatchList @relation(fields: [watchListId], references: [id])
  animeId     Int

  @@id([watchListId, animeId])
  @@map("watchlist_animes")
}
