// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @unique
  avatarUrl            String?
  username             String                @unique
  email                String                @unique
  bio                  String?
  isProfilePublic      Boolean               @default(false) // Profiles are private by default
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  following            Follow[]             @relation("follower")
  followers            Follow[]             @relation("followed")
  posts                Post[]
  comments             Comment[]
  commentLikes         CommentLike[]
  animeComments        AnimeComment[]
  watchlists           WatchList[]
  sharedWatchlists     WatchListUser[]
  animeCommentLikes    AnimeCommentLike[]
  animeCommentDislikes AnimeCommentDislike[]
  commentDislikes      CommentDislike[]
  postLikes            PostLike[]
  postDislikes         PostDislike[]
  animeLikes           AnimeLike[]
  followingRequests        FollowRequest[]     @relation("follower_request")
  followerRequests     FollowRequest[]   @relation("followed_request")
  @@map("users")
}

model AnimeLike {
  id        Int           @id @default(autoincrement())
  userId    String      
  user      User  @relation(fields: [userId], references: [id])
  animeId   String
  @@map("anime_likes")
}

model Follow {

  // User that is following.
  followerUser   User   @relation("follower", fields: [followerUserId], references: [id])
  followerUserId String

  // User that is being followed.
  followedUser    User   @relation("followed", fields: [followedUserId], references: [id])
  followedUserId  String

  @@id([followedUserId, followerUserId])
  @@map("follows")
}

model FollowRequest {
    followerUser    User   @relation("follower_request", fields: [followerUserId], references: [id])
    followerUserId  String
    followedUser   User   @relation("followed_request", fields: [followedUserId], references: [id])
    followedUserId String

    createdAt   DateTime      @default(now())

    @@id([followerUserId, followedUserId])
    @@map("follow_requests")
}

model Post {
  id          Int           @id @default(autoincrement())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  title       String
  body        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  comments    Comment[]
  likes    PostLike[]
  dislikes PostDislike[]

  @@map("posts")
}

model PostLike {
  id      Int    @id @default(autoincrement())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  postId  Int
  comment Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@map("posts_likes")
}

model PostDislike {
  id      Int    @id @default(autoincrement())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  postId  Int
  comment Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@map("posts_dislikes")
}

model Comment {
  id              Int       @id @default(autoincrement())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  postId          Int
  post            Post      @relation(fields: [postId], references: [id])
  parentCommentId Int? // Nullable field to reference the parent comment
  parentComment   Comment?  @relation("ChildComments", fields: [parentCommentId], references: [id])
  childComments   Comment[] @relation("ChildComments")

  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  likes     CommentLike[]
  dislikes  CommentDislike[]

  @@map("comments")
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments_likes")
}

model CommentDislike {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments_dislikes")
}

model AnimeComment {
  id      Int    @id @default(autoincrement())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  animeId Int
  episode Int?
  content String

  parentAnimeCommentId Int?
  parentAnimeComment   AnimeComment?  @relation("ChildAnimeComments", fields: [parentAnimeCommentId], references: [id], onDelete: Cascade)
  childAnimeComments   AnimeComment[] @relation("ChildAnimeComments")

  // Likes and Dislikes relationships
  likes    AnimeCommentLike[]    @relation("AnimeCommentLikes")
  dislikes AnimeCommentDislike[] @relation("AnimeCommentDislikes")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("anime_comments")
}

model AnimeCommentLike {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  animeCommentId Int
  animeComment   AnimeComment @relation("AnimeCommentLikes", fields: [animeCommentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("anime_comments_likes")
}

model AnimeCommentDislike {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  animeCommentId Int
  animeComment   AnimeComment @relation("AnimeCommentDislikes", fields: [animeCommentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("anime_comments_dislikes")
}

model WatchList {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id])
  watchlistUsers WatchListUser[]
  watchlistAnime WatchlistAnime[]

  @@map("watchlists")
}

model WatchListUser {
  role        String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  watchlistId Int
  watchlist   WatchList @relation(fields: [watchlistId], references: [id])

  @@id([userId, watchlistId])
  @@map("watchlist_users")
}

model WatchlistAnime {
  watchListId Int
  watchlist   WatchList @relation(fields: [watchListId], references: [id])
  animeId     Int

  @@id([watchListId, animeId])
  @@map("watchlist_animes")
}
